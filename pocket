#!/usr/bin/env php
<?php

define('BASE_PATH', __DIR__ . '/');
require BASE_PATH . 'vendor/autoload.php';
require BASE_PATH . 'bootstrap.php';

// Command registry: map command names to their class and description.
$commands = [
  'serve'              => [
    'class' => \Pocketframe\Console\Commands\ServeCommand::class,
    'desc'  => 'Start the built-in PHP server (automatically assigns a free port).'
  ],
  'controller:create'  => [
    'class' => \Pocketframe\Console\Commands\CreateControllerCommand::class,
    'desc'  => 'Generate a new controller file. Options: --api, --resource (-r), --invokable (-i).'
  ],
  'middleware:create'  => [
    'class' => \Pocketframe\Console\Commands\CreateMiddlewareCommand::class,
    'desc'  => 'Generate a new middleware class.'
  ],
  'clear:views'        => [
    'class' => \Pocketframe\Console\Commands\ClearViewsCommand::class,
    'desc'  => 'Clear compiled/cached views located in store/framework/views.'
  ],
  'add:key'            => [
    'class' => \Pocketframe\Console\Commands\AddKeyCommand::class,
    'desc'  => 'Generate a new application key.'
  ],
  'view:create'        => [
    'class' => \Pocketframe\Console\Commands\CreateViewCommand::class,
    'desc'  => 'Generate a new view file.'
  ],
  'store:link'        => [
    'class' => \Pocketframe\Console\Commands\CreateStoreLinkCommand::class,
    'desc'  => 'Create a symbolic link to the store directory.'
  ],
  'help'               => [
    'class' => \Pocketframe\Console\Commands\HelpCommand::class,
    'desc'  => 'Display a list of all available commands.'
  ],
];

// Check if the user requested help with the --help flag.
if (isset($argv[1]) && $argv[1] === '--help') {
  if (isset($argv[2])) {
    $commandToHelp = $argv[2];
    if (isset($commands[$commandToHelp])) {
      // Display help for the specific command.
      $desc = $commands[$commandToHelp]['desc'] ?? 'No description available.';
      echo "Help for command '{$commandToHelp}':\n";
      echo $desc . "\n";
    } else {
      echo "Unknown command '{$commandToHelp}' for help.\n";
    }
  } else {
    $commandName = 'help';
    $args = [];
    $commandClass = $commands[$commandName]['class'];
    $command = new $commandClass($args);
    $command->handle();
  }
  exit;
}

// Normal command processing.
$commandName = $argv[1] ?? null;

if (!$commandName) {
  $commandName = 'help';
  $args = [];
} elseif (!isset($commands[$commandName])) {
  echo "Unknown command: {$commandName}\n\n";
  $commandName = 'help';
  $args = [];
} else {
  // Get only the arguments after the command name.
  $args = array_slice($argv, 2);
}

$commandClass = $commands[$commandName]['class'];
$command = new $commandClass($args);
$command->handle();
